// Dnyaneshwar Giri
Array, Number

var a = {
	name: 'Hemant'
}

var b = 2;

function change(tempA, tempB) {
	tempA.name = 'Rishikesh';
	tempB = 3;
}

change(a, b);

console.log(a.name, b);  Hemant, 2


for (let i = 0; i < 6; i++) {
    setTimeout(function log() {
        console.log(i); // What is logged?
    }, 1000);
   
  
}
12345

var userName = "Hemant";

function b() {
    console.log(userName);
    let userName = "Rishikesh";
}

b()

var name = "Pratik";

var person = {
    name: "Hemant",
    age: 30,
    getDetail: function () {
        console.log(this.name);
    },
    getName: () => {
        console.log(this.name);
    }
}

person.getDetail();
person.getName();

function fibonacci(number){
  if(number===1){
    return 1;
  }
  else
    return number + fibonacci(number-1);
  
}

let a = [1, 2, 3, 4, 5, 5, 1, 1]
let b = [11, 9, 9, 11, 5, 6];
// Remove duplicates and merge

var newarray
var a=a
a.forEach(()=>{
  <T> 
})


// 2024



const obj = {
  x: 10,
  getX: function () {
    return this.x;
  },
};
console.log(obj.getX());

console.log("5" + 3);
console.log("5" - 3);

class Animal {
  constructor(name) {
    this.name = name;
  }
}

const arr = [];
console.log(arr instanceof Number);

function sleep(ms) {
  return new Promise((res) => {
    setTimeout(res, ms);
  });
}

console.log("b");
console.log(sleep(2000));
console.log("a");

const promise1 = new Promise((resolve) => setTimeout(resolve, 1000, "first"));
const promise2 = new Promise((resolve) => setTimeout(resolve, 2000, "second"));
const promise3 = new Promise((resolve) => setTimeout(resolve, 3000, "third"));

Promise.all([promise1, promise2, promise3])
  .then((values) => {
    console.log(values);
  })
  .catch((error) => {
    console.error(error)
  });


  [target]{

  }
::after
::before 
:active
:checked
li:nth-child(2n+1){




}

const { of } = require("rxjs");
const { map, filter } = require("rxjs/operators");

const source = of(1, 2, 3, 4, 5, 6);

const transformed$ = source.pipe(
  filter((x) => x % 2 === 0),
  map((x) => {
    return x * 2;
  })
);

transformed$.subscribe((d) => console.log(d));

export createTodo= createAction("Create [To Do]", props<{content:string}>());

constructor(private store: Store){}

public allToDos$=this.store.select(selectAllDos)

export const reducers = createReducer(initialState,
    on(addToDo, (state, {content})=>({
        ...state,
        todos: [...state.todos,{id: }]
    }))
)
createSelector(selectToDos, (state:Todostate)=>state.tods)
createEffects()

actions
reducers
selectors
effects


JSON.parse(JSON.stringify())


const _ =require('lodash')
const copy = _.cloneDeep(original)

function deepCopy(obj){
  if(obj === null || typeof   obj!='object'){
    return obj;
  }

  if(Array.isArray(obj)){
    return obj.map(deepCopy)
  }

  const copiedObject = {}
  for(const key in obj){
    if(obj.hasOwnProperty(key)){
      copiedObject[key]= deepCopy[obj[key]]
    }
  }

  return copiedObject;
}

function isObject(value){
return value instanceof Object
}


function Person(){
  
}


@media (min-widht:420px) and (max-width: 720px){

}

